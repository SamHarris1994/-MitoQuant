function MitoTrajectories(D, T, V, Option)
%MitoTrajectories(T, D, V, Opion) plots the trajectories map of
%mitochondrial movement. mitochondria in AR and RR will be plotted in red
%and blue color respectively. DP will be marked as green and ST will be
%marked as gray.
%
%   Examples
%       MitoTrajectories(D, T, V)
%       MitoTrajectories(D, T, V, Option)
%
%   INPUTS
%   T       : the mitochondrial trajectories.
%   D       : the detection of mitochondria, a structure generated by
%             MitoDetect.
%   V       : a strcuture exported by TransSpeedAnalysis(), which contains
%             transient speed and sustained speed.
%   Option  : a 1-by-4 vector,which controls the visibility of four movement
%             states [ST,DP,AR,RR] in tracjectories map. For instance,
%             [0 0 1 1] allows the function to output AR and RR
%             trajectories only. Be default, If Option is not assigned, the
%             function output all the trajectories in the four states. 

if(nargin == 3)
    Option = [1 1 1 1];
end
if(nargin == 4)
    if(size(Option,1) ~= 1 || size(Option,2) ~= 4)
        error('MitoTrajectories:the forth parameter should be a 1-by-4 vector.For example,[0 0 1 1]');
    end
end

Vt=V.transient;
Vs=V.sustained;
Track=T.id;
x0=5.12;
y0=5;
z0=1.5;

jscale=size(Track,1);
iscale=size(Vs,2);

%four movement states record matrix setting
if(Option(3)==1)
    AnterogradeX=zeros(iscale,jscale);
    AnterogradeY=zeros(iscale,jscale);
    AnterogradeZ=zeros(iscale,jscale);    
end
if(Option(4)==1)
    RetrogradeX=zeros(iscale,jscale);
    RetrogradeY=zeros(iscale,jscale);
    RetrogradeZ=zeros(iscale,jscale);    
end
if(Option(1)==1)
    StationaryX=zeros(2,1000);
    StationaryY=(1:1000);
    StationaryZ=(1:1000);    
end
if(Option(2)==1)
    DynamicPauseX=(1:1000);
    DynamicPauseY=(1:1000);
    DynamicPauseZ=(1:1000);    
end
AR_cnt=1;
RR_cnt=1;
sta_cnt=1;
dyn_cnt=1;

%classify all points into four states and load them into corresponding matrix
for j=1:jscale
    for i=1:iscale
        ind=Track(j,i);
        if ind >0
            co=D{i}(ind).Centroid;
            xi=co(1)/x0;
            yi=co(2)/y0;
            zi=i*z0;
            if (Option(2)==1 && Vs(j,i)<0.05 && Vs(j,i)>-0.05 && Vt(j,i)~=0)
                DynamicPauseX(dyn_cnt)=xi; 
                DynamicPauseY(dyn_cnt)=yi;
                DynamicPauseZ(dyn_cnt)=zi;
                dyn_cnt=dyn_cnt+1;
            end
            if (Option(3)==1 && Vs(j,i)>0.05 && Vt(j,i)~=0) 
                AnterogradeX(AR_cnt,j)=xi;
                AnterogradeY(AR_cnt,j)=yi;
                AnterogradeZ(AR_cnt,j)=zi;
                AR_cnt=AR_cnt+1;
            end
            if (Option(4)==1 && Vs(j,i)<-0.05 && Vt(j,i)~=0)
                RetrogradeX(RR_cnt,j)=xi;
                RetrogradeY(RR_cnt,j)=yi;
                RetrogradeZ(RR_cnt,j)=zi;
                RR_cnt=RR_cnt+1;
            end
            if (Option(1)==1 && Vt(j,i)==0)
                StationaryX(1,sta_cnt)=xi;
                StationaryY(sta_cnt)=yi;
                StationaryZ(sta_cnt)=zi;
                sta_cnt=sta_cnt+1;
            end
        end
    end
    AR_cnt=1;
    RR_cnt=1;
end

figure;
hold on;

%plot DynamicPause points' trajectories  
if(Option(2)==1)
    for t=1:dyn_cnt-2
        %the criterion helps distinguish different trajectories 
        if(abs(DynamicPauseX(t)-DynamicPauseX(t+1))<=3 && abs(DynamicPauseY(t)-DynamicPauseY(t+1))<=3 ...
                && abs(DynamicPauseZ(t)-DynamicPauseZ(t+1))<=10)
            plot3(DynamicPauseX(t:t+1),DynamicPauseY(t:t+1),DynamicPauseZ(t:t+1),'color',[0.4,0.89,0.80],'LineWidth',2)
        end
    end
end

%plot Stationary points' trajectories
%find those points whose x,y coordinates are equal respectively,while their
%z coordinates are different
if Option(1)==1
    first=1;
    search1=1;
    search2=2;
    tag=0;
    StationaryX(2,first)=1;
    for t=1:sta_cnt-1
        if(search2<sta_cnt-1)
            while(search2<sta_cnt && (StationaryX(1,search1)~=StationaryX(1,search2) || StationaryY(1,search1)~=StationaryY(1,search2)))
                search2=search2+1;
            end
            if(search2<sta_cnt)
                same_plotx(1,1:2)=[StationaryX(1,search1),StationaryX(1,search2)];
                same_ploty(1,1:2)=[StationaryY(search1),StationaryY(search2)];
                same_plotz(1,1:2)=[StationaryZ(search1),StationaryZ(search2)];
                plot3(same_plotx,same_ploty,same_plotz,'color',[0.8,0.8,0.8],'LineWidth',0.05)
                search1=search2;
                StationaryX(2,search1)=1;
                search2=search2+1;
                if(search2==sta_cnt)
                    tag=1;
                end
            end
        end  
        if(search2>=sta_cnt)
            while(first<sta_cnt && StationaryX(2,first)==1)
                first=first+1;
            end
            StationaryX(2,first)=1;
            search1=first;
            search2=search1+1;
            if(tag==0)
                if(search2<sta_cnt-1)
                    while(search2<sta_cnt && (StationaryX(1,search1)~=StationaryX(1,search2) || StationaryY(1,search1)~=StationaryY(1,search2)))
                        search2=search2+1;
                    end
                    if(search2<sta_cnt)
                        same_plotx(1,1:2)=[StationaryX(1,search1),StationaryX(1,search2)];
                        same_ploty(1,1:2)=[StationaryY(search1),StationaryY(search2)];
                        same_plotz(1,1:2)=[StationaryZ(search1),StationaryZ(search2)];
                        plot3(same_plotx,same_ploty,same_plotz,'color',[0.9,0.9,0.9],'LineWidth',0.05)
                        search1=search2;
                        StationaryX(2,search1)=1;
                        search2=search2+1;
                        if(search2==sta_cnt)
                            tag=1;
                        end
                    end
                end
            end
        end
    end
end

%plot Anterograde points' trajectories
if Option(3)==1
    first=1;
    last=1;
    for n=1:jscale
        while(last<=iscale && AnterogradeX(last,n)==0)
            first=first+1;
            last=last+1;
        end
        while(last<=iscale && AnterogradeX(last,n)~=0)
            last=last+1;
        end
        if(first ~= last)
            tempx(1:last-first)=AnterogradeX(first:last-1,n);
            tempy(1:last-first)=AnterogradeY(first:last-1,n);
            tempz(1:last-first)=AnterogradeZ(first:last-1,n);
            [tempz,index] = sort(tempz);
            for k=1:last-first-1
                if(abs(tempz(k)-tempz(k+1))<=10)
                    plot3(tempx(index(k):index(k+1)),tempy(index(k):index(k+1)),tempz(k:k+1),'-r','LineWidth',2.5)
                end
            end
        end       
        first=1;
        last=1; 
        clear tempx;
        clear tempy;
        clear tempz;
    end
end

%plot Retrograde points' trajectories
if Option(4)==1
    first=1;
    last=1;
    for n=1:jscale
        while(last<=iscale && RetrogradeX(last,n)==0)
            first=first+1;
            last=last+1;
        end
        while(last<=iscale && RetrogradeX(last,n)~=0)
            last=last+1;
        end
        if(first ~= last)
            tempx(1:last-first)=RetrogradeX(first:last-1,n);
            tempy(1:last-first)=RetrogradeY(first:last-1,n);
            tempz(1:last-first)=RetrogradeZ(first:last-1,n);
            [tempz,index] = sort(tempz);
            for k=1:last-first-1
                if(abs(tempz(k)-tempz(k+1))<=10)
                    plot3(tempx(index(k):index(k+1)),tempy(index(k):index(k+1)),tempz(k:k+1),'-b','LineWidth',2.5)
                end
            end
        end
        first=1;
        last=1; 
        clear tempx;
        clear tempy;
        clear tempz;
    end
end

axis([0 V.sizeY 0 V.sizeX 0 V.timespan]);
xlabel('x (um)');
ylabel('y (um)');
zlabel('Time (s)');
set(gca,'Projection','perspective','ZDir','reverse','YDir','reverse','Box','on','DataAspectRatio',[1.2 1 6.912],'View',[14 25])
